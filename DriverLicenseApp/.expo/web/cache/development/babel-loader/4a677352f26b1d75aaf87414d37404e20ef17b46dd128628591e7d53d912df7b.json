{"ast":null,"code":"import { DarkTheme } from '@react-navigation/native';\nimport React, { useState } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { Surface } from 'react-native-paper';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setTypeQuestion } from \"../../redux/QuestionsReducer\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Learning = function Learning(_ref) {\n  var navigation = _ref.navigation;\n  var dispatch = useDispatch();\n  var question = useSelector(function (state) {\n    return state.questions.importantQuestion.data;\n  });\n  var totalQuesion = function totalQuesion(typeQuestion) {\n    if (question && question.length > 0) return question.filter(function (item) {\n      return item.typequestion === typeQuestion;\n    });\n    return [];\n  };\n  var completeIQ = useSelector(function (state) {\n    return state.questions.importantQuestion.history;\n  });\n  var completeRQ = useSelector(function (state) {\n    return state.questions.ruleQuestion.history;\n  });\n  var compleateQuesion = function compleateQuesion(history) {\n    if (history && history.length > 0) return history.filter(function (item) {\n      return item.style.length > 0;\n    });\n    return [];\n  };\n  var width = [`${compleateQuesion(completeIQ).length / totalQuesion(\"important\").length * 100}%`, `${compleateQuesion(completeRQ).length / totalQuesion(\"rule\").length * 100}%`, `${10 / 20 * 100}%`, `${12 / 20 * 100}%`, `${15 / 20 * 100}%`, `${20 / 20 * 100}%`];\n  var completeQ = [`${compleateQuesion(completeIQ).length} / ${totalQuesion(\"important\").length}`, `${compleateQuesion(completeRQ).length} / ${totalQuesion(\"rule\").length}`];\n  var handleDataTran = function handleDataTran(typeQuestion, typeIndex, index) {\n    navigation.navigate('Question', {\n      typeQuestion: typeQuestion && typeQuestion.length > 0 ? typeQuestion[index] : null,\n      typeIndex: typeIndex && typeIndex.length > 0 ? typeIndex[index] : null,\n      stateAPi: index\n    });\n    dispatch(setTypeQuestion({\n      target: typeIndex[index]\n    }));\n  };\n  return _jsx(SafeAreaProvider, {});\n};\nexport default Learning;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#f5f5f5\",\n    marginBottom: 80\n  },\n  viewEx: {\n    justifyContent: 'space-between'\n  },\n  surfaceUser: {\n    flexDirection: 'row',\n    elevation: 6,\n    borderRadius: 20,\n    backgroundColor: \"white\",\n    margin: \"3%\"\n  },\n  ViewPercent: {\n    flex: 2,\n    marginLeft: '2%',\n    justifyContent: \"center\"\n  },\n  ImageUser: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["DarkTheme","React","useState","Image","TouchableOpacity","Text","View","StyleSheet","ScrollView","Surface","SafeAreaProvider","useDispatch","useSelector","setTypeQuestion","jsx","_jsx","Learning","_ref","navigation","dispatch","question","state","questions","importantQuestion","data","totalQuesion","typeQuestion","length","filter","item","typequestion","completeIQ","history","completeRQ","ruleQuestion","compleateQuesion","style","width","completeQ","handleDataTran","typeIndex","index","navigate","stateAPi","target","styles","create","container","flex","backgroundColor","marginBottom","viewEx","justifyContent","surfaceUser","flexDirection","elevation","borderRadius","margin","ViewPercent","marginLeft","ImageUser"],"sources":["C:/ReactNative/DriverLicense/DriverLicenseApp/screens/Leaning/Learning.js"],"sourcesContent":["import { DarkTheme } from '@react-navigation/native'\r\nimport React, { useState } from 'react'\r\nimport { Image, TouchableOpacity } from 'react-native'\r\nimport { Text, View, StyleSheet, ScrollView } from 'react-native'\r\nimport { Surface } from 'react-native-paper'\r\nimport { SafeAreaProvider } from 'react-native-safe-area-context'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setTypeQuestion } from '../../redux/QuestionsReducer';\r\n\r\n\r\n// const dataImages = {\r\n//     0: require('../../assets/12.png'),\r\n//     1: require('../../assets/13.png'),\r\n//     2: require('../../assets/14.png'),\r\n//     3: require('../../assets/16.png'),\r\n//     4: require('../../assets/15.png'),\r\n//     5: require('../../assets/17.png'),\r\n\r\n// };\r\n// const dataItem = [\"Câu hỏi điểm liệt\", \"Khái niệm và quy tắc\", \"Văn hóa và đạo đức lái xe\", \"Kỹ thuật lái xe\", \"Biển báo đường bộ\", \"Sa hình\"]\r\n// const typeQuestion = [\"important\", \"rule\"];\r\n// const typeIndex = [\"importantQuestion\", \"ruleQuestion\"];\r\n// const dataDetailItem = [\"20 Câu hỏi diểm liệt\", \"Gồm 83 câu hỏi\", \"Gồm 5 câu hỏi\", \"Gồm 12 câu hỏi\", \"Gồm 65 câu hỏi\", \"Gồm 35 câu hỏi\"]\r\n\r\n// const Leftcontent = (props) => {\r\n//     const imageName = props.image\r\n\r\n//     return (\r\n//         <View>\r\n//             <Image {...props} source={dataImages[imageName]} resizeMode='contain' style={{ borderRadius: 20 }} />\r\n//         </View>\r\n//     )\r\n// }\r\n\r\n\r\nconst Learning = ({ navigation }) => {\r\n    const dispatch = useDispatch();\r\n    const question = useSelector(state => state.questions.importantQuestion.data);\r\n    const totalQuesion = (typeQuestion) => {\r\n        if (question && question.length > 0) return question.filter(item => item.typequestion === typeQuestion)\r\n        return [];\r\n    }\r\n\r\n    const completeIQ = useSelector(state => state.questions.importantQuestion.history);\r\n    const completeRQ = useSelector(state => state.questions.ruleQuestion.history);\r\n    const compleateQuesion = (history) => {\r\n        if (history && history.length > 0) return history.filter(item => item.style.length > 0)\r\n        return [];\r\n    }\r\n\r\n    const width = [`${((compleateQuesion(completeIQ).length) / totalQuesion(\"important\").length) * 100}%`, `${((compleateQuesion(completeRQ).length) / totalQuesion(\"rule\").length) * 100}%`, `${(10 / 20) * 100}%`, `${(12 / 20) * 100}%`, `${(15 / 20) * 100}%`, `${(20 / 20) * 100}%`]\r\n    const completeQ = [`${(compleateQuesion(completeIQ).length)} / ${totalQuesion(\"important\").length}`, `${(compleateQuesion(completeRQ).length)} / ${totalQuesion(\"rule\").length}`]\r\n    const handleDataTran = (typeQuestion, typeIndex, index) => {\r\n        navigation.navigate('Question', {\r\n            typeQuestion: typeQuestion && typeQuestion.length > 0 ? typeQuestion[index] : null,\r\n            typeIndex: typeIndex && typeIndex.length > 0 ? typeIndex[index] : null,\r\n            stateAPi: index\r\n        })\r\n        dispatch(setTypeQuestion({ target: typeIndex[index] }))\r\n    }\r\n\r\n\r\n    return (\r\n        <SafeAreaProvider>\r\n            {/* <ScrollView style={styles.container}>\r\n                <View style={styles.viewEx}>\r\n                    {dataItem.map((item, index) => (\r\n                        <Surface key={index} >\r\n                            <TouchableOpacity style={styles.surfaceUser} theme={DarkTheme} onPress={() => handleDataTran(typeQuestion, typeIndex, index)} >\r\n                                <Leftcontent style={styles.ImageUser} image={index} />\r\n                                <View style={styles.ViewPercent} >\r\n                                    <Text style={{ fontSize: 20, fontWeight: 'bold' }}>{item}</Text>\r\n                                    <Text style={{ fontSize: 15, }}>{dataDetailItem[index]}</Text>\r\n                                    <View style={{ flexDirection: 'row', marginTop: '2%', }}>\r\n                                        <View style={{ backgroundColor: '#BBBBBB', marginRight: '2%', width: '80%', marginVertical: '3%', borderRadius: 20 }}>\r\n                                            <View style={{ backgroundColor: 'blue', width: width[index], height: 5, borderRadius: 20 }} />\r\n                                        </View>\r\n                                        <View>\r\n                                            <Text>{completeQ[index]}</Text>\r\n                                        </View>\r\n                                    </View>\r\n                                </View>\r\n                            </TouchableOpacity>\r\n                        </Surface>\r\n                    ))}\r\n                </View>\r\n            </ScrollView> */}\r\n        </SafeAreaProvider>\r\n    )\r\n}\r\n\r\nexport default Learning\r\n\r\nconst styles = StyleSheet.create({\r\n    container:\r\n    {\r\n        flex: 1,\r\n        backgroundColor: \"#f5f5f5\",\r\n        marginBottom: 80,\r\n    },\r\n    viewEx:\r\n    {\r\n        justifyContent: 'space-between',\r\n\r\n    },\r\n    surfaceUser:\r\n    {\r\n        flexDirection: 'row',\r\n        elevation: 6,\r\n        borderRadius: 20,\r\n        backgroundColor: \"white\",\r\n        margin: \"3%\"\r\n    },\r\n    ViewPercent:\r\n    {\r\n        flex: 2,\r\n        marginLeft: '2%',\r\n        justifyContent: \"center\",\r\n\r\n    },\r\n    ImageUser: {\r\n        flex: 1,\r\n    }\r\n\r\n})\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}