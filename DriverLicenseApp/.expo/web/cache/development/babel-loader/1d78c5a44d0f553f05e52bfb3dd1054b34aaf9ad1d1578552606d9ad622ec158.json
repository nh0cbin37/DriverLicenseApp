{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nvar initialState = {\n  loading: false,\n  question: [],\n  error: ''\n};\nvar Slice = createSlice({\n  name: 'question',\n  initialState: initialState,\n  reducers: {\n    setUser: function setUser(state, action) {\n      state.question = action.payload;\n    },\n    clearUser: function clearUser(state) {\n      state.question = null;\n    }\n  },\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchQuestionData.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(fetchQuestionData.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      state.question = action.payload;\n    }).addCase(fetchQuestionData.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport var fetchQuestionData = createAsyncThunk('question/fetchQuestionData', _asyncToGenerator(function* () {\n  var response = yield axios.get(`${HOST}/Question/get/`);\n  return response.data;\n}));\nvar _Slice$actions = Slice.actions,\n  setUser = _Slice$actions.setUser,\n  clearUser = _Slice$actions.clearUser;\nexport { setUser, clearUser };\nexport default Slice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","initialState","loading","question","error","Slice","name","reducers","setUser","state","action","payload","clearUser","extraReducers","builder","addCase","fetchQuestionData","pending","status","fulfilled","rejected","message","_asyncToGenerator","response","axios","get","HOST","data","_Slice$actions","actions","reducer"],"sources":["C:/ReactNative/DriverLicense/DriverLicenseApp/redux/QuestionsReducer.js"],"sourcesContent":["\r\n// import { FETCH_QUESTIONS_REQUEST, FETCH_QUESTIONS_SUCCESS, FETCH_QUESTIONS_FAILURE, SET_INDEX, SET_OPTION_STYLES } from './Middleware';\r\n\r\n// const initialState = {\r\n//     loading: false,\r\n//     question: [],\r\n//     error: '',\r\n// }\r\n\r\n// const Reducer = (state = initialState, action) => {\r\n//     switch (action.type) {\r\n\r\n//         case FETCH_QUESTIONS_REQUEST:\r\n//             return {\r\n//                 ...state,\r\n//                 loading: true\r\n//             }\r\n//         case FETCH_QUESTIONS_SUCCESS:\r\n//             return {\r\n//                 ...state,\r\n//                 loading: false,\r\n//                 question: action.payload,\r\n//                 error: ''\r\n//             }\r\n//         case FETCH_QUESTIONS_FAILURE:\r\n//             return {\r\n//                 ...state,\r\n//                 loading: false,\r\n//                 question: [],\r\n//                 error: action.payload\r\n//             }\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n\r\n// export default Reducer;\r\n\r\n\r\n\r\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    question: [],\r\n    error: '',\r\n}\r\n\r\nconst Slice = createSlice({\r\n    name: 'question',\r\n    initialState,\r\n    reducers: {\r\n        setUser: (state, action) => {\r\n            state.question = action.payload;\r\n        },\r\n        clearUser: state => {\r\n            state.question = null;\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchQuestionData.pending, state => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(fetchQuestionData.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.question = action.payload;\r\n            })\r\n            .addCase(fetchQuestionData.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.error.message;\r\n            });\r\n    }\r\n});\r\n\r\nexport const fetchQuestionData = createAsyncThunk('question/fetchQuestionData', async () => {\r\n    const response = await axios.get(`${HOST}/Question/get/`);\r\n    return response.data;\r\n});\r\n\r\nexport const { setUser, clearUser } = Slice.actions;\r\n\r\nexport default Slice.reducer;\r\n"],"mappings":";AAwCA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,IAAMC,YAAY,GAAG;EACjBC,OAAO,EAAE,KAAK;EACdC,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAE;AACX,CAAC;AAED,IAAMC,KAAK,GAAGL,WAAW,CAAC;EACtBM,IAAI,EAAE,UAAU;EAChBL,YAAY,EAAZA,YAAY;EACZM,QAAQ,EAAE;IACNC,OAAO,EAAE,SAAAA,QAACC,KAAK,EAAEC,MAAM,EAAK;MACxBD,KAAK,CAACN,QAAQ,GAAGO,MAAM,CAACC,OAAO;IACnC,CAAC;IACDC,SAAS,EAAE,SAAAA,UAAAH,KAAK,EAAI;MAChBA,KAAK,CAACN,QAAQ,GAAG,IAAI;IACzB;EACJ,CAAC;EACDU,aAAa,EAAE,SAAAA,cAAAC,OAAO,EAAI;IACtBA,OAAO,CACFC,OAAO,CAACC,iBAAiB,CAACC,OAAO,EAAE,UAAAR,KAAK,EAAI;MACzCA,KAAK,CAACS,MAAM,GAAG,SAAS;IAC5B,CAAC,CAAC,CACDH,OAAO,CAACC,iBAAiB,CAACG,SAAS,EAAE,UAACV,KAAK,EAAEC,MAAM,EAAK;MACrDD,KAAK,CAACS,MAAM,GAAG,WAAW;MAC1BT,KAAK,CAACN,QAAQ,GAAGO,MAAM,CAACC,OAAO;IACnC,CAAC,CAAC,CACDI,OAAO,CAACC,iBAAiB,CAACI,QAAQ,EAAE,UAACX,KAAK,EAAEC,MAAM,EAAK;MACpDD,KAAK,CAACS,MAAM,GAAG,QAAQ;MACvBT,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACN,KAAK,CAACiB,OAAO;IACtC,CAAC,CAAC;EACV;AACJ,CAAC,CAAC;AAEF,OAAO,IAAML,iBAAiB,GAAGjB,gBAAgB,CAAC,4BAA4B,EAAAuB,iBAAA,CAAE,aAAY;EACxF,IAAMC,QAAQ,SAASC,KAAK,CAACC,GAAG,CAAE,GAAEC,IAAK,gBAAe,CAAC;EACzD,OAAOH,QAAQ,CAACI,IAAI;AACxB,CAAC,EAAC;AAEK,IAAAC,cAAA,GAA+BvB,KAAK,CAACwB,OAAO;EAApCrB,OAAO,GAAAoB,cAAA,CAAPpB,OAAO;EAAEI,SAAS,GAAAgB,cAAA,CAAThB,SAAS;AAAmB,SAAAJ,OAAA,EAAAI,SAAA;AAEpD,eAAeP,KAAK,CAACyB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}