{"ast":null,"code":"import _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport React, { useEffect } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { FontAwesome5 } from '@expo/vector-icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setIndex, setStyles, moveToNextQuestion, moveToPreviousQuestion } from \"../redux/QuestionsReducer\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar windowWidth = Dimensions.get('window').width;\nvar windowHeight = Dimensions.get('window').height;\nvar LearningContent = function LearningContent(_ref) {\n  var props = Object.assign({}, (_objectDestructuringEmpty(_ref), _ref));\n  return _jsx(_Fragment, {});\n};\nexport default LearningContent;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: '30%'\n  },\n  question: {\n    borderRadius: 12,\n    flex: 1,\n    backgroundColor: 'white',\n    borderColor: \"black\",\n    elevation: 1,\n    width: \"90%\",\n    marginVertical: \"7%\"\n  },\n  headerQuestion: {\n    backgroundColor: 'blue',\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    borderRadius: 12,\n    paddingVertical: '2%'\n  },\n  bodyQuestion: {\n    flex: 2,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginHorizontal: '5%',\n    paddingVertical: '2%'\n  },\n  answer: {\n    flex: 2\n  },\n  option: {\n    flex: 1,\n    flexDirection: 'row',\n    width: \"90%\",\n    alignItems: 'center',\n    marginBottom: '3%'\n  },\n  idOption: {\n    flex: 0.4,\n    backgroundColor: 'white',\n    borderColor: \"black\",\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 5,\n    marginRight: '3%',\n    padding: '2%'\n  },\n  contentOption: {\n    flex: 10,\n    backgroundColor: 'white',\n    borderColor: \"black\",\n    borderRadius: 5,\n    padding: '2%'\n  },\n  explan: {\n    flex: 2,\n    borderColor: \"black\",\n    width: \"90%\",\n    display: \"none\"\n  },\n  headerExplan: {\n    flexDirection: 'row',\n    padding: '2%'\n  },\n  bodyExplan: {\n    backgroundColor: 'aqua',\n    borderRadius: 12,\n    padding: '2%'\n  }\n});","map":{"version":3,"names":["React","useEffect","Dimensions","FontAwesome5","useDispatch","useSelector","setIndex","setStyles","moveToNextQuestion","moveToPreviousQuestion","Fragment","_Fragment","jsx","_jsx","windowWidth","get","width","windowHeight","height","LearningContent","_ref","props","Object","assign","_objectDestructuringEmpty","styles","StyleSheet","create","container","flex","justifyContent","alignItems","marginBottom","question","borderRadius","backgroundColor","borderColor","elevation","marginVertical","headerQuestion","flexDirection","paddingVertical","bodyQuestion","marginHorizontal","answer","option","idOption","marginRight","padding","contentOption","explan","display","headerExplan","bodyExplan"],"sources":["C:/ReactNative/DriverLicense/DriverLicenseApp/components/LearningContent.js"],"sourcesContent":["import { ScrollView, StyleSheet, Text, TouchableOpacity, View, Image } from 'react-native'\r\nimport React, { useEffect } from 'react'\r\nimport { Dimensions } from 'react-native'\r\nimport { FontAwesome5 } from '@expo/vector-icons'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setIndex, setStyles, moveToNextQuestion, moveToPreviousQuestion } from '../redux/QuestionsReducer';\r\n\r\n\r\nconst windowWidth = Dimensions.get('window').width;\r\nconst windowHeight = Dimensions.get('window').height;\r\n\r\nconst LearningContent = ({ ...props }) => {\r\n    // const dispatch = useDispatch();\r\n    // const { index, typeQuestion, question, typeIndex, optionStyles, typeOptionStyle } = props;\r\n\r\n    // const importantQuestions =\r\n    //     question && question.length > 0\r\n    //         ? question.filter(item => item.typequestion === typeQuestion)\r\n    //         : [];\r\n\r\n    // const answerValues =\r\n    //     importantQuestions &&\r\n    //         importantQuestions.length > 0\r\n    //         ? Object.keys(importantQuestions[index].answer)\r\n    //             .filter(key => key !== 'correctoption')\r\n    //             .map(key => ({\r\n    //                 option: key,\r\n    //                 value: importantQuestions[index].answer[key]\r\n    //             }))\r\n    //         : [];\r\n\r\n\r\n\r\n    // const correctValues = importantQuestions &&\r\n    //     importantQuestions.length > 0 ? importantQuestions[index].answer.correctoption : \"\";\r\n\r\n\r\n    // const getOptionStyle = (index, option, correctValues) => {\r\n    //     const newStyles = Array.from({ length: answerValues.length }, () => ({\r\n    //         background: 'white',\r\n    //         textColor: 'black'\r\n    //     }));\r\n    //     newStyles[index].background = option === correctValues ? '#009900' : '#FF3333';\r\n    //     newStyles[index].textColor = 'white';\r\n    //     dispatch(setStyles({ target: typeOptionStyle, value: newStyles }));\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            {/* {importantQuestions && importantQuestions[index] && (\r\n                < ScrollView >\r\n                    <View style={styles.container}>\r\n                        <View style={styles.question}>\r\n                            <View style={styles.headerQuestion}>\r\n                                <TouchableOpacity onPress={() =>\r\n                                    dispatch(moveToPreviousQuestion({ target: typeOptionStyle }))\r\n                                } >\r\n                                    <FontAwesome5 name=\"angle-left\" size={50} color=\"white\" />\r\n                                </TouchableOpacity>\r\n                                <Text style={{ color: 'white', fontSize: 20 }}>{`Câu ${index + 1} / ${importantQuestions.length}`}</Text>\r\n                                <TouchableOpacity onPress={() =>\r\n                                    dispatch(moveToNextQuestion({ target: typeOptionStyle, value: importantQuestions }))\r\n                                }  >\r\n                                    <FontAwesome5 name=\"angle-right\" size={50} color=\"white\" />\r\n                                </TouchableOpacity>\r\n                            </View>\r\n                            <View style={styles.bodyQuestion}>\r\n                                <Text style={{ fontSize: 18 }}>\r\n                                    {importantQuestions[index].question}\r\n                                </Text>\r\n                            </View>\r\n                        </View>\r\n\r\n                        <View style={{ flex: 1, flexDirection: 'row', }} >\r\n                            {importantQuestions &&\r\n                                importantQuestions[index] &&\r\n                                importantQuestions[index].images && importantQuestions[index].images.map((image, index) => (\r\n                                    <Image key={index} source={{ uri: image }} style={{ width: windowWidth / 4, height: windowHeight / 8, marginHorizontal: '2%', marginBottom: '5%' }} />\r\n                                ))}\r\n                        </View>\r\n\r\n\r\n\r\n                        {answerValues.map((answer, index) => (\r\n                            <View style={styles.answer} key={index}>\r\n                                <TouchableOpacity onPress={() => getOptionStyle(index, answer.option, correctValues)} style={styles.option}>\r\n                                    <View style={{ ...styles.idOption, backgroundColor: optionStyles && optionStyles.length > 0 ? optionStyles[index].background : \"white\" }}>\r\n                                        <Text style={{ fontSize: 17, color: optionStyles && optionStyles.length > 0 ? optionStyles[index].textColor : \"black\" }}>{index + 1}</Text>\r\n                                    </View>\r\n                                    <View style={{ ...styles.contentOption, backgroundColor: optionStyles && optionStyles.length > 0 ? optionStyles[index].background : \"white\" }}>\r\n                                        <Text style={{ fontSize: 17, color: optionStyles && optionStyles.length > 0 ? optionStyles[index].textColor : \"black\" }}>\r\n                                            {answer.value}\r\n                                        </Text>\r\n                                    </View>\r\n                                </TouchableOpacity>\r\n                            </View>\r\n                        ))}\r\n\r\n                        {optionStyles.map((item, indexStyle) => (\r\n                            item && item.background === \"#009900\" ? (\r\n                                <View style={{ ...styles.explan, display: 'flex' }} key={indexStyle}>\r\n                                    <View style={styles.headerExplan}>\r\n                                        <FontAwesome5 name=\"comment-dots\" size={24} color=\"blue\" />\r\n                                        <Text style={{ fontSize: 18, fontWeight: \"bold\", paddingLeft: '2%' }}>GIẢI THÍCH ĐÁP ÁN</Text>\r\n                                    </View>\r\n                                    <View style={styles.bodyExplan}>\r\n                                        <Text style={{ fontSize: 18 }}>\r\n                                            {importantQuestions[index].explan}\r\n                                        </Text>\r\n                                    </View>\r\n                                </View>) : null\r\n                        ))}\r\n\r\n                    </View>\r\n                </ ScrollView >\r\n            )\r\n            } */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LearningContent\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        marginBottom: '30%',\r\n    },\r\n    question: {\r\n        borderRadius: 12,\r\n        flex: 1,\r\n        backgroundColor: 'white',\r\n        borderColor: \"black\",\r\n        elevation: 1,\r\n        width: \"90%\",\r\n        marginVertical: \"7%\",\r\n\r\n    },\r\n    headerQuestion: {\r\n        backgroundColor: 'blue',\r\n        flex: 1,\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around',\r\n        alignItems: 'center',\r\n        borderRadius: 12,\r\n        paddingVertical: '2%'\r\n    },\r\n    bodyQuestion: {\r\n        flex: 2,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        marginHorizontal: '5%',\r\n        paddingVertical: '2%'\r\n    },\r\n    answer: {\r\n        flex: 2,\r\n\r\n    },\r\n    option: {\r\n        flex: 1,\r\n        flexDirection: 'row',\r\n        width: \"90%\",\r\n        alignItems: 'center',\r\n        marginBottom: '3%',\r\n    },\r\n    idOption: {\r\n        flex: 0.4,\r\n        backgroundColor: 'white',\r\n        borderColor: \"black\",\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        borderRadius: 5,\r\n        marginRight: '3%',\r\n        padding: '2%',\r\n\r\n    },\r\n    contentOption: {\r\n        flex: 10,\r\n        backgroundColor: 'white',\r\n        borderColor: \"black\",\r\n        borderRadius: 5,\r\n        padding: '2%',\r\n    },\r\n    explan: {\r\n        flex: 2,\r\n        borderColor: \"black\",\r\n        width: \"90%\",\r\n        display: \"none\",\r\n    },\r\n    headerExplan: {\r\n        flexDirection: 'row',\r\n        padding: '2%',\r\n    },\r\n    bodyExplan: {\r\n        backgroundColor: 'aqua',\r\n        borderRadius: 12,\r\n        padding: '2%',\r\n    },\r\n\r\n\r\n})"],"mappings":";;;;;;;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAA,OAAAC,UAAA;AAExC,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,QAAQ,EAAEC,SAAS,EAAEC,kBAAkB,EAAEC,sBAAsB;AAAoC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAG5G,IAAMC,WAAW,GAAGZ,UAAU,CAACa,GAAG,CAAC,QAAQ,CAAC,CAACC,KAAK;AAClD,IAAMC,YAAY,GAAGf,UAAU,CAACa,GAAG,CAAC,QAAQ,CAAC,CAACG,MAAM;AAEpD,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAAC,IAAA,EAAqB;EAAA,IAAZC,KAAK,GAAAC,MAAA,CAAAC,MAAA,MAAAC,yBAAA,CAAAJ,IAAA,GAAAA,IAAA;EAoC/B,OACIP,IAAA,CAAAF,SAAA,IAqEE,CAAC;AAEX,CAAC;AAED,eAAeQ,eAAe;AAE9B,IAAMM,MAAM,GAAGC,UAAU,CAACC,MAAM,CAAC;EAC7BC,SAAS,EAAE;IACPC,IAAI,EAAE,CAAC;IACPC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE,QAAQ;IACpBC,YAAY,EAAE;EAClB,CAAC;EACDC,QAAQ,EAAE;IACNC,YAAY,EAAE,EAAE;IAChBL,IAAI,EAAE,CAAC;IACPM,eAAe,EAAE,OAAO;IACxBC,WAAW,EAAE,OAAO;IACpBC,SAAS,EAAE,CAAC;IACZrB,KAAK,EAAE,KAAK;IACZsB,cAAc,EAAE;EAEpB,CAAC;EACDC,cAAc,EAAE;IACZJ,eAAe,EAAE,MAAM;IACvBN,IAAI,EAAE,CAAC;IACPW,aAAa,EAAE,KAAK;IACpBV,cAAc,EAAE,cAAc;IAC9BC,UAAU,EAAE,QAAQ;IACpBG,YAAY,EAAE,EAAE;IAChBO,eAAe,EAAE;EACrB,CAAC;EACDC,YAAY,EAAE;IACVb,IAAI,EAAE,CAAC;IACPC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE,QAAQ;IACpBY,gBAAgB,EAAE,IAAI;IACtBF,eAAe,EAAE;EACrB,CAAC;EACDG,MAAM,EAAE;IACJf,IAAI,EAAE;EAEV,CAAC;EACDgB,MAAM,EAAE;IACJhB,IAAI,EAAE,CAAC;IACPW,aAAa,EAAE,KAAK;IACpBxB,KAAK,EAAE,KAAK;IACZe,UAAU,EAAE,QAAQ;IACpBC,YAAY,EAAE;EAClB,CAAC;EACDc,QAAQ,EAAE;IACNjB,IAAI,EAAE,GAAG;IACTM,eAAe,EAAE,OAAO;IACxBC,WAAW,EAAE,OAAO;IACpBN,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE,QAAQ;IACpBG,YAAY,EAAE,CAAC;IACfa,WAAW,EAAE,IAAI;IACjBC,OAAO,EAAE;EAEb,CAAC;EACDC,aAAa,EAAE;IACXpB,IAAI,EAAE,EAAE;IACRM,eAAe,EAAE,OAAO;IACxBC,WAAW,EAAE,OAAO;IACpBF,YAAY,EAAE,CAAC;IACfc,OAAO,EAAE;EACb,CAAC;EACDE,MAAM,EAAE;IACJrB,IAAI,EAAE,CAAC;IACPO,WAAW,EAAE,OAAO;IACpBpB,KAAK,EAAE,KAAK;IACZmC,OAAO,EAAE;EACb,CAAC;EACDC,YAAY,EAAE;IACVZ,aAAa,EAAE,KAAK;IACpBQ,OAAO,EAAE;EACb,CAAC;EACDK,UAAU,EAAE;IACRlB,eAAe,EAAE,MAAM;IACvBD,YAAY,EAAE,EAAE;IAChBc,OAAO,EAAE;EACb;AAGJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}